{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fc18f86d",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'faker'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Input \u001b[1;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mfaker\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Faker\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msys\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdatetime\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m date\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'faker'"
     ]
    }
   ],
   "source": [
    "from faker import Faker\n",
    "import sys\n",
    "from datetime import date\n",
    "import random\n",
    "from main_config import MainConfig\n",
    "import argparse\n",
    "import pathlib\n",
    "from bisect import bisect_left\n",
    "\n",
    "\n",
    "headers = [\n",
    "    'ssn',\n",
    "    'cc_num',\n",
    "    'first',\n",
    "    'last',\n",
    "    'gender',\n",
    "    'street',\n",
    "    'city',\n",
    "    'state', \n",
    "    'zip', \n",
    "    'lat', \n",
    "    'long', \n",
    "    'city_pop',\n",
    "    'job', \n",
    "    'dob', \n",
    "    'acct_num', \n",
    "    'profile'\n",
    "]\n",
    "\n",
    "\n",
    "def make_cities():\n",
    "    cities = {}\n",
    "    with open('./demographic_data/locations_partitions.csv', 'r') as f:\n",
    "        for line in f.readlines()[1:]:\n",
    "            cdf, output = line.strip().split(',')\n",
    "            cities[float(cdf)] = output.split('|')\n",
    "        return cities\n",
    "\n",
    "\n",
    "def make_age_gender_dict():\n",
    "    gender_age = {}\n",
    "    prev = 0\n",
    "    with open('./demographic_data/age_gender_demographics.csv', 'r') as f:\n",
    "        for line in f.readlines()[1:]:\n",
    "            l = line.strip().split(',')\n",
    "            prev += float(l[3])\n",
    "            gender_age[prev] = (l[2], float(l[1]))\n",
    "        return gender_age\n",
    "\n",
    "\n",
    "class Customer:\n",
    "    'Randomly generates all the attributes for a customer'\n",
    "\n",
    "    def __init__(self, config, seed_num=None):\n",
    "        self.fake = Faker()\n",
    "        if seed_num is not None:\n",
    "            Faker.seed(seed_num)\n",
    "        # turn all profiles into dicts to work with\n",
    "        self.all_profiles = MainConfig(config).config\n",
    "\n",
    "    def generate_customer(self):\n",
    "        self.gender, self.dob, self.age = self.generate_age_gender()\n",
    "        self.addy = self.get_random_location()\n",
    "        customer_data = [\n",
    "            self.fake.ssn(),\n",
    "            self.fake.credit_card_number(),\n",
    "            self.get_first_name(),\n",
    "            self.fake.last_name(),\n",
    "            self.gender,\n",
    "            self.fake.street_address()\n",
    "        ] + self.addy + [\n",
    "            self.fake.job(),\n",
    "            self.dob,\n",
    "            str(self.fake.random_number(digits=12)),\n",
    "            self.find_profile()\n",
    "        ]\n",
    "        return customer_data\n",
    "\n",
    "    def get_first_name(self):\n",
    "        if self.gender == 'M':\n",
    "            return self.fake.first_name_male()\n",
    "        else:\n",
    "            return self.fake.first_name_female()\n",
    "\n",
    "    def generate_age_gender(self):\n",
    "        n = random.random()\n",
    "        g_a = age_gender[min([a for a in age_gender if a > n])]\n",
    "\n",
    "        while True:\n",
    "            age = int(g_a[1])\n",
    "            today = date.today()\n",
    "            try:\n",
    "                rand_date = self.fake.date_time_this_century()\n",
    "                # find birthyear, which is today's year - age - 1 if today's month,day is smaller than dob month,day\n",
    "                birth_year = today.year - age - ((today.month, today.day) < (rand_date.month, rand_date.day))\n",
    "                dob = rand_date.replace(year=birth_year)\n",
    "\n",
    "                # return first letter of gender, dob and age\n",
    "                return g_a[0][0], dob.strftime(\"%Y-%m-%d\"), age\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "    # find nearest city\n",
    "    def get_random_location(self):\n",
    "        \"\"\"\n",
    "        Assumes lst is sorted. Returns closest value to num.\n",
    "        \"\"\"\n",
    "        num = random.random()\n",
    "        lst = list(cities.keys())\n",
    "        pos = bisect_left(lst, num)\n",
    "        if pos == 0:\n",
    "            return cities[lst[0]]\n",
    "        if pos == len(cities):\n",
    "            return cities[lst[-1]]\n",
    "        before = lst[pos - 1]\n",
    "        after = lst[pos]\n",
    "        if after - num < num - before:\n",
    "            return cities[after]\n",
    "        else:\n",
    "            return cities[before]\n",
    "\n",
    "    def find_profile(self):\n",
    "        city_pop = float(self.addy[-1])\n",
    "\n",
    "        match = []\n",
    "        for pro in self.all_profiles:\n",
    "            # -1 represents infinity\n",
    "            if (self.gender in self.all_profiles[pro]['gender']\n",
    "                and self.age >= self.all_profiles[pro]['age'][0]\n",
    "                and (self.age < self.all_profiles[pro]['age'][1] \n",
    "                    or self.all_profiles[pro]['age'][1] == -1) \n",
    "                and city_pop >= self.all_profiles[pro]['city_pop'][0] \n",
    "                and (city_pop < self.all_profiles[pro]['city_pop'][1] \n",
    "                    or self.all_profiles[pro]['city_pop'][1] == -1)\n",
    "                ):\n",
    "                match.append(pro)\n",
    "        if match == []:\n",
    "            match.append('leftovers.json')\n",
    "\n",
    "        # found overlap -- write to log file but continue\n",
    "        if len(match) > 1:\n",
    "            with open('profile_overlap_warnings.log', 'a') as f:\n",
    "                f.write(f\"{' '.join(match)}: {self.gender} {str(self.age)} {str(city_pop)}\\n\")\n",
    "        return match[0]\n",
    "\n",
    "\n",
    "def main(num_cust, seed_num, config, out_path):\n",
    "    if num_cust <= 0 or seed_num is None or config is None:\n",
    "        parser.print_help()\n",
    "        exit(1)\n",
    "\n",
    "    # setup output to file by redirecting stdout\n",
    "    original_sys_stdout = sys.stdout\n",
    "    if out_path is not None:\n",
    "        f_out = open(out_path, 'w')\n",
    "        sys.stdout = f_out\n",
    "\n",
    "    # print headers\n",
    "    print(\"|\".join(headers))\n",
    "\n",
    "    c = Customer(config=config, seed_num=seed_num)\n",
    "    for _ in range(num_cust):\n",
    "        customer_data = c.generate_customer()\n",
    "        print(\"|\".join(customer_data))\n",
    "\n",
    "\n",
    "    # restore original sdtout when done\n",
    "    if out_path is not None:\n",
    "        sys.stdout = original_sys_stdout\n",
    "\n",
    "\n",
    "cities = make_cities()\n",
    "age_gender = make_age_gender_dict()\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    parser = argparse.ArgumentParser(description='Customer Generator')\n",
    "    parser.add_argument('count', type=int, help='Number of customers to generate', default=10)\n",
    "    parser.add_argument('seed', type=int, nargs='?', help='Random generator seed', default=42)\n",
    "    parser.add_argument('config', type=pathlib.Path, nargs='?', help='Profile config file (typically profiles/main_config.json\")', default='./profiles/main_config.json')\n",
    "    parser.add_argument('-o', '--output', type=pathlib.Path, help='Output file path', default=None)\n",
    "\n",
    "    args = parser.parse_args()\n",
    "    num_cust = args.count\n",
    "    seed_num = args.seed\n",
    "    config = args.config\n",
    "    out_path = args.output\n",
    "\n",
    "    main(num_cust, seed_num, config, out_path)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "nbTranslate": {
   "displayLangs": [
    "*"
   ],
   "hotkey": "alt-t",
   "langInMainMenu": true,
   "sourceLang": "en",
   "targetLang": "fr",
   "useGoogleTranslate": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
